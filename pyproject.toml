[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "test-squadron-discord-bot"
version = "1.0.0"
description = "A Discord bot for managing TEST Squadron community functions"
authors = [{name = "ChromeNinja", email = "t.riley.garrett@gmail.com"}]
license = {text = "Proprietary"}
requires-python = ">=3.11"
dependencies = [
    "discord.py>=2.3.1,<3.0.0",
    "PyYAML>=6.0,<7.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "aiohttp>=3.8.4,<4.0.0",
    "beautifulsoup4>=4.12.2,<5.0.0",
    "lxml>=4.9.3,<5.0.0",
    "aiosqlite>=0.20.0,<1.0.0",
    "aiolimiter>=1.1.0,<2.0.0",
    "PyNaCl==1.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.2.0",
    "pytest-asyncio>=0.23.6",
    "mypy>=1.8.0",
    "ruff>=0.3.0",
    "pre-commit>=3.6.0",
    "types-PyYAML",
    "types-beautifulsoup4",
]

[tool.ruff]
target-version = "py311"
line-length = 88
show-fixes = true

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "YTT",    # flake8-2020
    "S",      # flake8-bandit
    "BLE",    # flake8-blind-except
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "C4",     # flake8-comprehensions
    "EM",     # flake8-errmsg
    "ICN",    # flake8-import-conventions
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "PL",     # pylint
    "TRY",    # tryceratops
    "PERF",   # perflint
    "RUF",    # ruff-specific rules
]

ignore = [
    "S101",   # assert used (acceptable in tests)
    "PLR2004", # magic value used in comparison
    "T20",    # print found (acceptable for CLI scripts)
    "EM101",  # raw string in exception
    "TRY003", # long exception message
    "PLR0913", # too many arguments
    "S311",   # pseudo-random generators (acceptable for tokens)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "ARG001", "ARG002", "ARG005"]  # Allow assert, magic values, unused args in tests
"scripts/validate.py" = ["S603", "TRY300"]  # Allow subprocess call, try-return pattern
"helpers/defensive_retry.py" = ["S311"]  # Allow random for jitter
"helpers/structured_errors.py" = ["BLE001"]  # Allow broad exception catching for error reporting
"helpers/schema_validation.py" = ["BLE001", "TRY300"]  # Allow broad exceptions and try-return

[tool.ruff.lint.isort]
known-first-party = ["bot", "cogs", "config", "helpers", "verification", "data"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "discord.*",
    "aiohttp.*",
    "bs4.*",
    "lxml.*",
    "aiosqlite.*",
    "aiolimiter.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
]
filterwarnings = [
    "error::DeprecationWarning:helpers.*",
    "ignore:.*audioop.*:DeprecationWarning",
    "ignore:Deprecated call to `pkg_resources.declare_namespace`:DeprecationWarning",
    "ignore::DeprecationWarning:discord.*",
    "ignore::DeprecationWarning:bs4.*",
]
markers = [
    "asyncio: marks tests as async",
]
